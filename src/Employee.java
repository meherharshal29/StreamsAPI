import java.util.*;import java.util.stream.Collectors;import java.util.stream.IntStream;import java.util.stream.Stream;class Dept {    private String dept;    public Dept() {    }    public Dept(String dept) {        this.dept = dept;    }    public String getDept() {        return dept;    }    public void setDept(String dept) {        this.dept = dept;    }    @Override    public String toString() {        return "Dept  : " +                "dept = '" + dept + '\'';    }}public class Employee {        private int id;        private String companyName;        private Dept dept;        private long salary;    public Employee() {    }    public Employee(int id, String companyName, Dept dept,long salary) {        this.id = id;        this.companyName = companyName;        this.dept = dept;        this.salary =salary;    }    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getCompanyName() {        return companyName;    }    public void setCompanyName(String companyName) {        this.companyName = companyName;    }    public Dept getDept() {        return dept;    }    public void setDept(Dept dept) {        this.dept = dept;    }    public long getSalary() {        return salary;    }    public void setSalary(long salary) {        this.salary = salary;    }    @Override    public String toString() {        return                "id : " + id +                ", companyName : '" + companyName + '\'' +                ", dept : " + dept +                ", salary : " + salary ;    }    public static void main(String[] args) {//        1. Create a stream from an array of integers and print all elements.        int[] arr = {1,2,3,4,5};        Arrays.stream(arr).forEach(System.out::println);//        2. Convert a list of strings into uppercase using streams.        List<String> upperCase = Arrays.asList("Java","Stream","API");        System.out.println(upperCase.stream().map(String::toUpperCase).toList());//        3. Filter even numbers.        List<Integer> isEven = Arrays.asList(1,2,3,4,5,6,7);        System.out.println(isEven.stream().filter(e -> e % 2 == 0).toList());//       4. Find sum of list.        List<Integer> sum =Arrays.asList(1,2,3,4,5);        System.out.println(sum.stream().mapToInt(Integer::intValue).sum());//       5. Count strings starting with "A".        List<String> names = List.of("Apple","Banana","Avocado");        System.out.println(names.stream().filter(e -> e.startsWith("A")).count());//        6. Sort numbers.        List<Integer> sortNum = Arrays.asList(1,5,3,2,4);        System.out.println(sortNum.stream().sorted().toList());//        7. Max number.        List<Integer> maxNum = Arrays.asList(1,5,3,2,4);        System.out.println(maxNum.stream().max(Integer::compare).get());//        8.Min number.        List<Integer> minNum = Arrays.asList(1,5,3,2,4);        System.out.println(minNum.stream().min(Integer::compare).get());//        9. Map strings to lengths.        List<String> stringLength = Arrays.asList("Harshal", "Meher", "Java", "Stream");        System.out.println(stringLength.stream().map(String::length).toList());//        10. Remove duplicates.        List<Integer> duplicate = Arrays.asList(1,2,2,4,5,6,1);        System.out.println(duplicate.stream().distinct().toList());//        11. Filter empty strings.        List<String> words = List.of("java","","api"," ");        System.out.println(words.stream().filter(e -> !e.trim().isEmpty()).toList());//        12. Concatenate strings.        List<String> concateString = Arrays.asList("Harshal", "Meher", "Java", "Stream");        System.out.println(concateString.stream().collect(Collectors.joining()));        System.out.println(String.join(" : ", concateString));//        13. Convert list to set.        List<String> set = Arrays.asList("Harshal", "Meher", "Java", "Stream");        System.out.println(set.stream().collect(Collectors.toSet()));        System.out.println(new HashSet<>(set));//        14. Check all numbers positive.        List<Integer> checkAll = Arrays.asList(1,2,3,4,5);        System.out.println(checkAll.stream().allMatch(e -> e > 0));//        15. Check any number > 100.        List<Integer> anyMatch = Arrays.asList(1,2,3,4,5);        System.out.println(anyMatch.stream().anyMatch(e -> e > 100));//        16. Average of numbers.        List<Integer> avg = Arrays.asList(1,2,3,4,5,6,7,8,9,0);        System.out.println(avg.stream().mapToInt(Integer::intValue).average().getAsDouble());//        17. Group strings by first character.        List<String> group = Arrays.asList("Harshal", "Meher", "Java", "Stream");        System.out.println(group.stream().collect(Collectors.groupingBy(e -> e.charAt(0))));//       18. Partition even/odd.        List<Integer> partition = Arrays.asList(1,2,3,4,5,6,7,8,9,0);        System.out.println(                partition.stream()                .collect(Collectors.partitioningBy(n -> n % 2 == 0)));//      19. Second highest number.        List<Integer> second = Arrays.asList(1,2,3,4,5,6,7,8,9);        System.out.println(second.stream().sorted(Comparator.reverseOrder()).skip(1).findFirst().get());//        20. Find first non-empty string.        List<String> nonEmpty = Arrays.asList("", "  ", "Java", "Stream", "API");        nonEmpty.stream().filter(s -> !s.isEmpty()).findFirst().ifPresent(System.out::println);//        21. Flatten list of lists.        List<List<Integer>> listOfLists = List.of(List.of(1,2), List.of(3,4) ,List.of(6,7));        System.out.println(listOfLists.stream().flatMap(List::stream).toList());//        22. Word frequency in string.        String text = "apple banana apple orange";        System.out.println(Arrays.stream(text.split(" ")).collect(Collectors.groupingBy(x -> x, Collectors.counting())));//        23. Group employees by department.        List<Employee> employees = List.of(                new Employee(101, "TCS", new Dept("IT"), 20000),                new Employee(102, "Infosys", new Dept("HR"),30000),                new Employee(103, "Wipro", new Dept("IT"),40000),                new Employee(104, "Amazon", new Dept("Manager"),50000)        );        System.out.println(employees.stream().collect(Collectors.groupingBy(s -> s.dept.getDept(), Collectors.counting())));//        24. Highest salary employee.        System.out.println(employees.stream().max(Comparator.comparing(Employee::getSalary)).get());//        25. Extract employee names.        System.out.println(employees.stream().map(Employee::getCompanyName).toList());//        26. Longest string in list.        List<String> longestString = Arrays.asList("Harshal", "Mehershab", "Java", "Stream");        System.out.println(longestString.stream().max(Comparator.comparingInt(String::length)).get());//        27. Reverse sort.        List<Integer> reverseSort = Arrays.asList(1,2,3,4,5);        System.out.println(reverseSort.stream().sorted(Comparator.reverseOrder()).toList());//        28. Common elements in two lists.        List<Integer> list1 = List.of(1,2,3,4);        List<Integer> list2 = List.of(3,4,5,6);        System.out.println(list1.stream().filter(list2::contains).toList());//        29. Total transaction amount.        System.out.println(employees.stream().mapToDouble(Employee::getSalary).sum());//        30. Distinct characters from words.        String  distinctC = "HelloHarshalSir";        System.out.println(distinctC.chars().mapToObj(c -> (char) c).distinct().toList());        List<String> distinctC1 = List.of("Hello", "Harshal", "Sir");        distinctC1.stream().flatMap(s -> s.chars().mapToObj(e -> (char)e)).distinct().toList().forEach(System.out::println);//        31. Skip first 5.        List<Integer> num = Arrays.asList(1,2,3,4,5,6,7,8,9);        System.out.println(num.stream().skip(5).toList());//        32. Limit to first 3.        System.out.println(num.stream().limit(3).toList());//        33. Convert list to map (idâ†’object).        System.out.println(employees.stream().collect(Collectors.toMap(Employee::getCompanyName, e -> e)));//        34. Top 3 salaries.        employees.stream().sorted(Comparator.comparing(Employee::getSalary).reversed()).limit(3).toList().forEach(System.out::println);//        35. Check if list sorted.//        36. Custom collector for product.        List<Integer> customCollector = Arrays.asList(2, 3, 4, 5);        System.out.println(customCollector.stream().reduce(1, (a, b) -> a * b));//        37. Parallel stream performance.        List<Integer> parallel = Arrays.asList(1, 2, 3, 4, 5);        System.out.println(parallel.parallelStream().reduce(0, Integer::sum));//        38. Find primes.        List<Integer> primes = Arrays.asList(1, 2, 3, 4, 5, 11, 15, 17, 19, 20);        System.out.println(primes.stream()                .filter(n -> n > 1 && IntStream.range(2, n).noneMatch(i -> n % i == 0))                .toList());//        39. Fibonacci numbers.        Stream.iterate(                new int[] { 0 , 1 },                        f -> new int[] { f[1], f[0] + f[1] })                         .limit(8)                         .map(f -> f[0])                         .forEach(System.out::println);        System.out.println(Stream.iterate(1, i -> i + 1).limit(100).toList());//        40. Random numbers.        System.out.println( new Random()                .ints(5, 1, 101)                .boxed().toList());//        41. Find duplicates.        List<Integer> findDuplicates = Arrays.asList(1, 2, 3, 4, 5, 3, 4, 5 , 6 , 1);        Set<Integer> find = new HashSet<>();        System.out.println(                findDuplicates                        .stream()                        .filter(n -> !find.add(n))                        .toList());//        42. Remove null values.        List<String> withNull = Arrays.asList("a", null, "b");        System.out.println(withNull.stream().filter(Objects::nonNull).toList());//        43. Stringâ†’length map        List<String> mapLength = List.of("Hello", "Harshal", "Sir");        System.out.println(mapLength.stream().collect(Collectors.toMap(s -> s, String::length)));//        44. Most repeated element.        List<Integer> dup = Arrays.asList(1, 2, 3, 2, 4, 2, 3, 3, 3);        System.out.println(                 dup.stream()                .collect(Collectors.groupingBy(n -> n, Collectors.counting()))                .entrySet().stream()                .max(Map.Entry.comparingByValue())                .get()                .getKey());//        45. Merge two lists.        List<String> s1 = Arrays.asList("A", "B", "C");        List<String> s2 = Arrays.asList("D", "E", "F");        System.out.println(Stream.concat(s1.stream(), s2.stream()).toList());//        47. Flatten nested map.        Map<String, Map<String,Integer>> nested = Map.of("A", Map.of("x",1,"y",2));        nested.values().stream().flatMap(m -> m.entrySet().stream())                .forEach(System.out::println);//        48. Character frequency map.        String str = "banana";        System.out.println(                 str.chars()                .mapToObj(c -> (char) c)                .collect(Collectors.groupingBy(c -> c, Collectors.counting())));        System.out.println(str.chars().mapToObj(c -> (char) c).collect(Collectors.groupingBy(s -> s ,                Collectors.counting())));//        49. kth largest element.        List<Integer> nums = Arrays.asList(10, 20, 5, 30, 15);        int k = 4;        int kth = nums.stream()                .sorted(Comparator.reverseOrder())                .skip(k - 1)                .findFirst()                .orElseThrow();        System.out.println(k + "th largest = " + kth);//        50. Factorial using reduce.        int n = 5;        System.out.println(IntStream.rangeClosed(1, n).reduce(1, (a, b) -> a * b));    }}